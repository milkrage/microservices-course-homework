// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/milkrage/microservices-course-homework/payment/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

type PaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentService) EXPECT() *PaymentService_Expecter {
	return &PaymentService_Expecter{mock: &_m.Mock}
}

// Pay provides a mock function with given fields: ctx, orderID, userID, paymentMethod
func (_m *PaymentService) Pay(ctx context.Context, orderID string, userID string, paymentMethod string) (model.Payment, error) {
	ret := _m.Called(ctx, orderID, userID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (model.Payment, error)); ok {
		return rf(ctx, orderID, userID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) model.Payment); ok {
		r0 = rf(ctx, orderID, userID, paymentMethod)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, orderID, userID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type PaymentService_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - userID string
//   - paymentMethod string
func (_e *PaymentService_Expecter) Pay(ctx interface{}, orderID interface{}, userID interface{}, paymentMethod interface{}) *PaymentService_Pay_Call {
	return &PaymentService_Pay_Call{Call: _e.mock.On("Pay", ctx, orderID, userID, paymentMethod)}
}

func (_c *PaymentService_Pay_Call) Run(run func(ctx context.Context, orderID string, userID string, paymentMethod string)) *PaymentService_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *PaymentService_Pay_Call) Return(_a0 model.Payment, _a1 error) *PaymentService_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentService_Pay_Call) RunAndReturn(run func(context.Context, string, string, string) (model.Payment, error)) *PaymentService_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
