syntax = "proto3";

package inventory.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/milkrage/microservices-course-homework/shared/pkg/proto/inventory/v1;inventory_v1";

// InventoryService a service responsible for storing and providing information about parts for assembling spacecraft.
service InventoryService {
  rpc GetPart(GetPartRequest) returns(GetPartResponse);
  rpc ListParts(ListPartsRequest) returns(ListPartsResponse);
}

// Part is declaration one part.
message Part {
  string uuid = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  int64 stock_quantity = 5;
  Category category = 6;
  Dimensions dimensions = 7;
  Manufacturer manufacturer = 8;
  repeated string tags = 9;
  map<string, Value>  metadata = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// Category is ENUM of available categories.
enum Category {
  UNKNOWN = 0;
  ENGINE = 1;
  FUEL = 2;
  PORTHOLE = 3;
  WING = 4;
}

// Dimensions is a struct describing the dimensions of a part.
message Dimensions {
  double length = 1;
  double width = 2;
  double height = 3;
  double weight = 4;
}

// Manufacturer is a struct describing the manufacturer of a part.
message Manufacturer {
  string name = 1;
  string country = 2;
  string website = 3;
}

// Value is a OneOf value for metadata of part.
message Value {
  oneof value {
    string string_value = 1;
    int64 int64_value = 2;
    double double_value = 3;
    bool bool_value = 4;
  }
}

// PartsFilter is a filter for request of part list.
message PartsFilter {
  repeated string uuids = 1;
  repeated string names = 2;
  repeated Category categories = 3;
  repeated string manufacturer_countries = 4;
  repeated string tags = 5;
}


// GetPartRequest request to obtain a detail by its uuid
message GetPartRequest {
  string uuid = 1;
}


// GetPartResponse is response with one part.
message GetPartResponse {
  Part part = 1;
}

// ListPartsRequest - request a parts list with filter support.
message ListPartsRequest {
  PartsFilter filter = 1;
}

// ListPartsResponse - response with a list of parts.
message ListPartsResponse {
  repeated Part parts = 1;
}
