// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/milkrage/microservices-course-homework/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, orderID
func (_m *OrderRepository) Get(ctx context.Context, orderID string) (model.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
func (_e *OrderRepository_Expecter) Get(ctx interface{}, orderID interface{}) *OrderRepository_Get_Call {
	return &OrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderID)}
}

func (_c *OrderRepository_Get_Call) Run(run func(ctx context.Context, orderID string)) *OrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_Get_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Get_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, order
func (_m *OrderRepository) Upsert(ctx context.Context, order model.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type OrderRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
func (_e *OrderRepository_Expecter) Upsert(ctx interface{}, order interface{}) *OrderRepository_Upsert_Call {
	return &OrderRepository_Upsert_Call{Call: _e.mock.On("Upsert", ctx, order)}
}

func (_c *OrderRepository_Upsert_Call) Run(run func(ctx context.Context, order model.Order)) *OrderRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Order))
	})
	return _c
}

func (_c *OrderRepository_Upsert_Call) Return(_a0 error) *OrderRepository_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Upsert_Call) RunAndReturn(run func(context.Context, model.Order) error) *OrderRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
